4. Videoda Entitlayer katmanýna Concrete klasörü eklendi ve entityler tanýmlandý.

5. Videoda Paket yükleme iþlemleri yapýldý.

7. Videoda Classlar referanslarý verildi Data(Ent)-Busi(Data,Ent)-Dto(Ent)-WebApi(Hepsi)

8. Videoda DataAccesLayer katmanýnda Concrete adýnda klasör tanýmlandý ve klasörün içine context class eklendi ardýnda database baðlantýlarý
yapýldý ve oluþturulan entityler database entegre edildi.

9. Videoda DataAccesLayer Abstract klasörü oluþturduk ve bu klasörün içine IGenericDal oluþturuldu ve bu IGenericDal içine ekleme silme ve güncelleme iþlemleri
tanýmlandý ayriyetten entityler içinde özel interfaceler tanýmlandý özel durumlarda onlarýn içine tanýmlanacaktýr.

10. Videoda GenericRepostiroy oluþturuldu Tanýmlanan IGenericDal daki ekleme silme güncelleme iþlemlerini çalýþtýrýp database kaydetmek için kodlama iþlemlerinin
yapýldýðý yer.

11. Videoda DataAccesLayer EntityFramwork klasörü oluþturduk bu tanýmlanan klasörün için entitylerimize özel tanýmlanan metodlarý burada 
iþleme geçirmek için tanýmlanan bir katman þeklidir.

12. Videoda BusinessAccesLayer katmanýnda Concrete klasörü ve Abstract klasörü oluþturduk bu klasörlerin içine tanýmlama yapýldý ilk baþta
Abstract klasörünün içine IgenericService tanýmlandý sonra DataAccessLayer katmanýndaki IGenericDal daki ekleme silme güncelleme iþlemleri 
bu classýn içinede tanýmlanmýþ oldu, ve her bir classýmýz için birer interface serviceleri de tanýmlandý özel methodlarý oluþturmak için

13. Vidoda BusinessAccessLayer katmanýnda Concrete klasörü tanýmladýk concrete klasörünün içine ise Managerlarýmýzý tanýmladýk ve managerlarýn enregrelerini ise 
IGenericService ile ekleme silme ve güncelleme iþlemlerini yaptýk ardýndan bu iþlemleri ele geçirmek için DataAccessLayer katmanýnda tanýmladýðýmýz her bir class
için IStaffDal gibi örnek onun gibi methodlar Concretede manager içine tanýmlayýp generateconstracter geçtik ardýndan ekleme silme ve güncelleme iþlemleri için 
gerekli kodlamalarý yazdýk.

14. Videoda swagggerýn nasýl bir arayüz ve nasýk çalýþtýðýna dair bir deneme yapýldý ve Controller klasöründe ApiController seçip bir boþ controller
gelicek ve ardýndan içine get put delete gibi atrebütleri tanýmlayýp api de karþýmýza çýkardýk.

15. Videoda listeleme ve ekleme iþlemleri ApiControllerda yapýldý.

16. Videoda Güncelleme silme ve Id'ye göre getirme iþlemlerini yaptýk. 

17. Videoda Bütün entitylerimiz için bir ApiController tanýmladýk ve onlarý birer get put ve delet etrabütleri ile çalýþtýrdýk. Yani ekelem silme ve güncelleme de
swagger yapabiliyormuyuz testini gerçekleþtirdik.

18. Videoda Temayý ekledik.

19. Videoda Web sitemizi programýmýza ekledik ve scriptleri ve gerekli yollarý verdik.

20. Videoda Web sitelerini partiallara ayýrdýk.

21. Videoda Apiyi frontend tarafýna consume etmek için gerekli Programcs de consume iþlemi uygulandu bakabilirsin.

22. Videoda WebUI StaffController tanýmlandý ve içine gerekli kodlar gelmesi için kodlar yazýldý ve bir index oluþturuldu. Kodlarý StaffControllerda inceleyebilirsin.
Ayriyetten hangilerini çaðýrmamýz gerekiyorse sitemizde nelerin gözükmesi için bir model oluþturuldu.

23. Videoda Tanýmlanan WebUý Tarafýnda Staff Index ile ilgili web sitemize gelmesi gereken iþlemleri yaptýk.

24. Videoda StaffController bir ekleme view için AddStaff oluþturuldu ardýnda ekleme yapmasýný için gerekli kodlarý AddStaff içine yazdý ve oluþturulan View 
tarafýnda AddStaff ise bir görünüm olarak gerekli kodlarý ve eklenecek iþlemleri aldý

25. Videoda Silme iþlemi yaptýk WEbUI tarafýnda StaffController içinde DeleteStaff olaný içine gerekli kodlar yazýlýp ApiController tarafýndada StaffController 
içinde delete olana HttpDelete parantez açýp id verdik.

26. Videoda StaffController için bir get ve post etrebütü oluþturduk. Gerekli olan bir Model oluþturmamýz lazým UpdateStaffViewModel olarak bir tane oluþturduk.
StaffControllerda ilk baþta get için yani personelin verilerini getirmek için get yerinin içini doldurduk.

27. Videoda Staff iþlemlerinin komple güncellenmesi için gerekli iþlemler post tarafýnda yaptýk yani baþlýk olarakta HttPost tarafýnda oldu.

28-. Videoda Testimonial Controllerda ekleme silme güncelleme iþlemlerini frontend tarafýný dinamik halini yaptýk. 

29. Videoda DtoLayer katmanýnda dtolarýmýzý ekledik

30. Videoda Automapper iþlemleri için WepApi kýsmýna bir managetpacket kurduk automapper için ardýndan automapperýn için bir klasör açtýk ve 
gerekli mapplemeyi oraya yaptýk program.cs kýsmýna iþleme geçirdik. ve ayriyetten dtolarda hatalý yerleri kullanýcýya gösterme iþlemi için Dto
klasöründe yer alan yere bakýlabilir.

31. Videoda Room2Controller da swagger da listenin gelip gelmediðini kontrol etmek için gerekli ilk kodu yazma iþlemi yaptýk. 

32. Videoda ekleme iþleminin kontrolünü yaptýk ekleme iþlemi ise AddRoomDtodan örnek alýnarak mapper kullanýlarak yapýldý.

33. Videoda güncelleme iþlemi yapýldý kodlarý ise Room2 Controller da vardýr.

34. Videoda Frontend kýsmýnda bir dto klasörü oluþturduk Model tutulan database sýnýflarýný dto klasöründe tutmuþ olacaðýz

35. Videoda ilk baþta frontend tarafýnda automapper ekleme iþlemi yaptýk ki automapper ile mapleyelim dtoda tanýmladýðýmýz iþlemleri ardýndan 
automapper da maplenen iþlemi program.cs tarafýnda da iþleme geçirmemiz gerekiyor. Controller tarafýnda ServiceController tanýmladýk ve ilk baþta
index tarafýný ayarladýk ardýndan içini doldurmaya baþlayýp bir index view oluþturup bu verileri sitemizde tanýmladýk. AutoMapperda maplenen dtoyuda
ServiceControllerda çaðýrmýþ oluyoruz.

36. Videoda Hizmetlerin Eklenmesi için Gerekli Service içine kodlar yazýlmýþtýr. CreateServiceDto ile yardým alýnarak database verileri getirilip eklenme
iþlemi yapýldý.

37. Videoda Hizmetler Silinmesi için gerekli ServiceController içine kodlar yazýlmýþtýr.

38. Videoda Hizmetler Güncellenmesi için gerekli ServiceController içine kodlar yazýlmýþtýr. Eðer ki herhangi bir model veya dto tanýmladýðýn database
verilerinin bir tanesini bile boþ geçersen ekleme silme veya güncelleme yapmaz geçtiðin yerin view orada tanýmlarsan ayný iþlemi yapar. o yüzden
dtoda veya model de tanýmlanan database verilerini viewda geçerken hangisi nerede tam tanýmlýyorsan hepsini ayný yerde geç

39. Videoda Identity Kütüphanesi için gerekli 2 tane asp.net core identity ve framework ýdentity ekledik ardýndan entitylayer katmanýna 
concrete içine iki tane class tanýmladýk biri approle biride appuser gerekli propertüleri girdik. ardýndan DataAccesLayer katmanýna
concrete içindeki contexte IdentityDbContext geçtik ve package manager consoledan migration uyguladýk.

40. Videoda RegisterController ve RegisterDto eklendi iþlemi 41. Videoda yapacaðýz.

41. Videoda Registercontroller için CreateNewUserDto dan bir dto parametresi tanýmladýk ardýndan RegisterController içinde Indexde bunu geçtik ve
gerekli kodlarý yazmaya baþladýk ardýndan kendim parolalar için kullanýcýya hata mesajý yazdýrmak için Model içine CustomerIdentityValidator klasörüne
bir class ekledim ve gerekli kodlarý içine geçtim. ve bunu Index View tarafýnda modelonly olarak asp-validator-summary içinde geçtim.
ardýndan bunun çalýþmasý için program.cs tarafýnda gerekli kod olarak þu þekilde geçilmelidir.
builder.Services.AddIdentity<AppUser, AppRole>().AddEntityFrameworkStores<Context>().AddErrorDescriber<CustomerIdentityValidator>();
identity kütüphanesinin eklenmesi yanýnda direk AddErrorDescriber<model tanýmlanan class geçilmelidir.>

42. Videoda login iþlemi yapmak için LoginController tanýmladýk ve onun için bir Dto tanýmlamasý yapmamýz gerekiyor ve LoginUserDto tanýmlamýþ olduk 
ardýndan LoginController ekranýnda Httppost etrabütün içine loginuserdto geçtik ve gerekli kodlama iþlemlerini yaptýk. Ardýndan ýndex tarafýnda 
view içine geçtik tabiki unutmamýz gereken birþey dto kullanýlýyorsa mappingde kullanýlmasý gerekicek mapping de geçmiþ olduk.

43. Videoda Default Controller oluþturduk ve Asýl temayý eklemiþ olduk.

44. Videoda View Componentlere ayýrma iþleminin baþlangýcý.

45. Videoda Layout komple partiallara ayýrdýk.

46. Videoda Anasayfa düzenlemeleri yapýldý.

47. Videoda About Entity eklendi. DataAccesLayer Katmanýnda eklenen Entityi Concrete klasörünün içinde contextde sql sayfamýza
ekledik. Ardýndan Abstractta ve EntityFrameworkde eklenen entity geçildi. Geçilen Entity BusinessLayer katmanýnda hem Abstracta
hemde Concerete sayfasýnda ekleme silme ve güncelleme iþlemleri yapabilmesi için eklenmesi yapýldý ardýndan WebApi katmanýnda 
controller klasöründe Swagger için ekleme silme güncelleme testleri yapýldý. Frontend tarafýnda tanýmlanan components de yer
alan aboutusPartial gidip gerekli iþlemleri yaptýk ve bunun ViewComponents de çaðýrma iþlemi yapýldý onlardan önce ise Frontend 
tarafýnda dto tanýmlandý.

48. Videoda Frontend tarafýnda our rooms yaptýk onun için bir dto tanýmlandý sadece ve Componentd de tanýmlanan dto ile çaðýrýlma 
iþlemi yapýldý bir sonraki iþlemde componentsde Model þeklinde çaðýrýlýp foreach ile döndürülüp ekledikçe gelmesini saðladý.

49. Videoda Componentsde ve ViewComponents olan Video düzenlemesi hale getirdik.

50. Videoda Componentsde ve ViewComponents olan Service dinamik hale getirdik.

51. Videoda Componentsde ve ViewComponents olan Testimoniali dinamik hale getirdik.

52. Videoda Componentsde ve ViewComponents olan Teams dinamik hale getirdik.

53. Videoda Componentsde ve ViewComponents olan Subscribe dinamik hale getirdik. Subscribe için Default Controller da içine tanýmlama yaptýk ve
oradan bir view oluþturduk ardýndan onun için httpost ve httpget þeklinde atrebütler ile gerekli iþlemleri yaptýk.

54. Videoda Subscribe buton sorunu vardý onu halletik

55. Videoda Footer Alaný düzenlendi.

56. Videoda Booking sayfasý oluþuturuldu.

57. Videoda EntityLayer katmanýnda Booking class oluþturuldu ve bu oluþturulan sýnýf DataAcces katmanýnda çaðrýldý, ve database yansýtýldý. 
ardýndan abstract ve EntityFramework'e gerekli tanýmlamalar yapýldý. BusinessLayer katmanýnda abstract ve concrete klasörlerine tanýmlamalar yapýldý ve
program.cs de tanýmlamalar geçirildi.

58. Videoda Swagger için controller api tarafýnda tanýmlama yapýldý ve controller için dolduruldu. Ve Frontend tarafýnda Controller tarafýnda AddBooking
tanýmlandý ve bir view oluþturuldu. Viewler düzenlendi.

59. Videoda BookingController da ekleme ilþlemi yapýlacaktýr. AddBooking adýnda viewýmýz Tanýmladýðýmýz dto kýsmýndaki CreateBookingDto model olarak 
çaðýrýp gereklii kodlarý ve asp-for, controller tanýmlamalarý yaptýk.

60-61 Videoda Butonlar eklendi ve düzenlendi.

62. Videoda BookingAdmin controller ApprovedReservations isimler baþlýðýn içeriðindeki metodlarý yazdýk.

63. Videoda Entitye özel metod tanýmladýk. Abstract içinde IbookingDal da olan yere bir özgü metod tanýmladýk ve EfBookingDal da ise bunu çaðýrdýk ve içine
gerekli metodlarý yazdýk ardýndan BusinessLayer Katmanýnda BookingService IbookingDal da tanýmlanan metodu Service içinde çaðýrdýk baþýna T koyaraktan
farklýlýðýný saðlasýn diye bunuda BookingManager da iþleme geçirdik ve WepApi kýsmýnda BookingControllerda Ýþleme aldýk.

64. Videoda ise Attribütlere birden çok nasýl kullanýlýr öðrenildi. Web Api kýsmýnda BookingController içinde HTTPPUT dan 2 tane vardý onlara alýnanb
baþlýðý tanýmladýk.

65. Videoda Entitye özel metod tanýmladýk. Abstract içinde IbookingDal da olan yere bir özgü metod tanýmladýk ve EfBookingDal da ise bunu çaðýrdýk ve içine
gerekli metodlarý yazdýk ardýndan BusinessLayer Katmanýnda BookingService IbookingDal da tanýmlanan metodu Service içinde çaðýrdýk baþýna T koyaraktan
farklýlýðýný saðlasýn diye bunuda BookingManager da iþleme geçirdik ve WepApi kýsmýnda BookingControllerda Ýþleme aldýk.

Önemli!!
69. Videoda RapidApi diye bir klasör oluþturduk ve onada controller da bir controller oluþturduk 100 filmi rapid api ile çekmek için 
ardýndan rapid api web sitesinde c# httpclient þeklinde çekme iþlemi için koduna baktým. Ardýndan bunu controller üzerinde tanýmladým ve bir adet view
model oluþturdum. Neleri çekmem gerektiðini bilmek için sonra Controller bir view oluþturdum ve ondan ViewModel tanýmladýðýmý model ve list þeklinde
çaðýrdým ve gerekli iþlemleri web siteme yansýmasý için frontend kodlarýný yazdým.
Önemli!!
70. Videoda RapidApi diye bir klasör oluþturduk ve onada controller da bir controller oluþturduk. Bu sefer doviz kuru çekmek için Controller oluþturduk.
ardýndan Controller da c# httpclient þeklinde rapidapi web sitesinde kodunu controllera entegre ediyoruz ve bir view model oluþturuyoruz view modeli
oluþturduktan sonra edit den özel yapýþtýrma sistemi var ordan json olarak çevirdik. Ardýndan Index tarafýnda tanýmlanan model list þeklinde web sitesine
frotend kodlarýyla yansýttýk.
Önemli!!
72. Videoda RapidApi diye bir klasör oluþturduk ve onada controller da bir controller oluþturduk. Bu sefer otellere göre çekmek için Controller oluþturduk.
ardýndan Controller da c# httpclient þeklinde rapidapi web sitesinde kodunu controllera entegre ediyoruz ve bir view model oluþturuyoruz view modeli
oluþturduktan sonra edit den özel yapýþtýrma sistemi var ordan json olarak çevirdik. Ardýndan Index tarafýnda tanýmlanan model list þeklinde web sitesine
frotend kodlarýyla yansýttýk. 
Önemli!!
73. Videoda BookingLocation Controller tanýmlandý ve yine rapidapiden c# httpclient ile lokasyon verilerini çektik, ve bunu ýndexde tek bir lakasyonu 
alabilmek için gerekli düzenleme frontend kodlarý ile yapýldý fakat þöyle ki controllerde da bunu çaðýrdýk ki viewmodele tanýmlananý ve bide viewmodeli
ýndexde çaðýrdýk verileri Model View de ki proplarý ise rapidapi result þeklinde kopyaladýk ve model classýnda özel yapýþtýrma ile çaðýrdýk.
Önemli!!
74. Videoda BookingLocation controller da if methodu tanýmladýk ama class içine bir method tanýmladýk string türünde cityname ile ardýnda if else methodu
ile iþlem yapýlan kodlarý döngüye aldýk. cityName ise RequestUri içindeki get iþlemi yapýlan yerde ise dolar tanýmlayýp class verdiðimiz methodu orada 
tanýmladýk eðer ki else yanlýþ ise bize direk parisin kodunu döndürücektir.Index tarafýnýda kontrol et orada farklý bir tanýmlama þekli yapýldý.
Önemli!!
75. Videoda BookingByCity Controller da 74. Vidoda id ile getirilen otelleri BookingByCity sayfasýnda Bookinglocation idsini verdi ve bizde BookingByCity
ile bunun verilen idnin otellerini sýrayla yazdýrdýk ekranýmýza. Ýncele Önemli dersler Baþýna önemli koyduklarým.

76. Videoda