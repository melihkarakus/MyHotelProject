4. Videoda Entitlayer katmanýna Concrete klasörü eklendi ve entityler tanýmlandý.

5. Videoda Paket yükleme iþlemleri yapýldý.

7. Videoda Classlar referanslarý verildi Data(Ent)-Busi(Data,Ent)-Dto(Ent)-WebApi(Hepsi)

8. Videoda DataAccesLayer katmanýnda Concrete adýnda klasör tanýmlandý ve klasörün içine context class eklendi ardýnda database baðlantýlarý
yapýldý ve oluþturulan entityler database entegre edildi.

9. Videoda DataAccesLayer Abstract klasörü oluþturduk ve bu klasörün içine IGenericDal oluþturuldu ve bu IGenericDal içine ekleme silme ve güncelleme iþlemleri
tanýmlandý ayriyetten entityler içinde özel interfaceler tanýmlandý özel durumlarda onlarýn içine tanýmlanacaktýr.

10. Videoda GenericRepostiroy oluþturuldu Tanýmlanan IGenericDal daki ekleme silme güncelleme iþlemlerini çalýþtýrýp database kaydetmek için kodlama iþlemlerinin
yapýldýðý yer.

11. Videoda DataAccesLayer EntityFramwork klasörü oluþturduk bu tanýmlanan klasörün için entitylerimize özel tanýmlanan metodlarý burada 
iþleme geçirmek için tanýmlanan bir katman þeklidir.

12. Videoda BusinessAccesLayer katmanýnda Concrete klasörü ve Abstract klasörü oluþturduk bu klasörlerin içine tanýmlama yapýldý ilk baþta
Abstract klasörünün içine IgenericService tanýmlandý sonra DataAccessLayer katmanýndaki IGenericDal daki ekleme silme güncelleme iþlemleri 
bu classýn içinede tanýmlanmýþ oldu, ve her bir classýmýz için birer interface serviceleri de tanýmlandý özel methodlarý oluþturmak için

13. Vidoda BusinessAccessLayer katmanýnda Concrete klasörü tanýmladýk concrete klasörünün içine ise Managerlarýmýzý tanýmladýk ve managerlarýn enregrelerini ise 
IGenericService ile ekleme silme ve güncelleme iþlemlerini yaptýk ardýndan bu iþlemleri ele geçirmek için DataAccessLayer katmanýnda tanýmladýðýmýz her bir class
için IStaffDal gibi örnek onun gibi methodlar Concretede manager içine tanýmlayýp generateconstracter geçtik ardýndan ekleme silme ve güncelleme iþlemleri için 
gerekli kodlamalarý yazdýk.

14. Videoda swagggerýn nasýl bir arayüz ve nasýk çalýþtýðýna dair bir deneme yapýldý ve Controller klasöründe ApiController seçip bir boþ controller
gelicek ve ardýndan içine get put delete gibi atrebütleri tanýmlayýp api de karþýmýza çýkardýk.

15. Videoda listeleme ve ekleme iþlemleri ApiControllerda yapýldý.

16. Videoda Güncelleme silme ve Id'ye göre getirme iþlemlerini yaptýk. 

17. Videoda Bütün entitylerimiz için bir ApiController tanýmladýk ve onlarý birer get put ve delet etrabütleri ile çalýþtýrdýk. Yani ekelem silme ve güncelleme de
swagger yapabiliyormuyuz testini gerçekleþtirdik.

18. Videoda Temayý ekledik.

19. Videoda Web sitemizi programýmýza ekledik ve scriptleri ve gerekli yollarý verdik.

20. Videoda Web sitelerini partiallara ayýrdýk.

21. Videoda Apiyi frontend tarafýna consume etmek için gerekli Programcs de consume iþlemi uygulandu bakabilirsin.

22. Videoda WebUI StaffController tanýmlandý ve içine gerekli kodlar gelmesi için kodlar yazýldý ve bir index oluþturuldu. Kodlarý StaffControllerda inceleyebilirsin.
Ayriyetten hangilerini çaðýrmamýz gerekiyorse sitemizde nelerin gözükmesi için bir model oluþturuldu.

23. Videoda Tanýmlanan WebUý Tarafýnda Staff Index ile ilgili web sitemize gelmesi gereken iþlemleri yaptýk.

24. Videoda StaffController bir ekleme view için AddStaff oluþturuldu ardýnda ekleme yapmasýný için gerekli kodlarý AddStaff içine yazdý ve oluþturulan View 
tarafýnda AddStaff ise bir görünüm olarak gerekli kodlarý ve eklenecek iþlemleri aldý

25. Videoda Silme iþlemi yaptýk WEbUI tarafýnda StaffController içinde DeleteStaff olaný içine gerekli kodlar yazýlýp ApiController tarafýndada StaffController 
içinde delete olana HttpDelete parantez açýp id verdik.

26. Videoda StaffController için bir get ve post etrebütü oluþturduk. Gerekli olan bir Model oluþturmamýz lazým UpdateStaffViewModel olarak bir tane oluþturduk.
StaffControllerda ilk baþta get için yani personelin verilerini getirmek için get yerinin içini doldurduk.

27. Videoda Staff iþlemlerinin komple güncellenmesi için gerekli iþlemler post tarafýnda yaptýk yani baþlýk olarakta HttPost tarafýnda oldu.

28-. Videoda Testimonial Controllerda ekleme silme güncelleme iþlemlerini frontend tarafýný dinamik halini yaptýk. 

29. Videoda DtoLayer katmanýnda dtolarýmýzý ekledik

30. Videoda Automapper iþlemleri için WepApi kýsmýna bir managetpacket kurduk automapper için ardýndan automapperýn için bir klasör açtýk ve 
gerekli mapplemeyi oraya yaptýk program.cs kýsmýna iþleme geçirdik. ve ayriyetten dtolarda hatalý yerleri kullanýcýya gösterme iþlemi için Dto
klasöründe yer alan yere bakýlabilir.

31. Videoda Room2Controller da swagger da listenin gelip gelmediðini kontrol etmek için gerekli ilk kodu yazma iþlemi yaptýk. 

32. Videoda ekleme iþleminin kontrolünü yaptýk ekleme iþlemi ise AddRoomDtodan örnek alýnarak mapper kullanýlarak yapýldý.

33. Videoda güncelleme iþlemi yapýldý kodlarý ise Room2 Controller da vardýr.

34. Videoda Frontend kýsmýnda bir dto klasörü oluþturduk Model tutulan database sýnýflarýný dto klasöründe tutmuþ olacaðýz

35. Videoda ilk baþta frontend tarafýnda automapper ekleme iþlemi yaptýk ki automapper ile mapleyelim dtoda tanýmladýðýmýz iþlemleri ardýndan 
automapper da maplenen iþlemi program.cs tarafýnda da iþleme geçirmemiz gerekiyor. Controller tarafýnda ServiceController tanýmladýk ve ilk baþta
index tarafýný ayarladýk ardýndan içini doldurmaya baþlayýp bir index view oluþturup bu verileri sitemizde tanýmladýk. AutoMapperda maplenen dtoyuda
ServiceControllerda çaðýrmýþ oluyoruz.

36. Videoda Hizmetlerin Eklenmesi için Gerekli Service içine kodlar yazýlmýþtýr. CreateServiceDto ile yardým alýnarak database verileri getirilip eklenme
iþlemi yapýldý.

37. Videoda Hizmetler Silinmesi için gerekli ServiceController içine kodlar yazýlmýþtýr.

38. Videoda Hizmetler Güncellenmesi için gerekli ServiceController içine kodlar yazýlmýþtýr. Eðer ki herhangi bir model veya dto tanýmladýðýn database
verilerinin bir tanesini bile boþ geçersen ekleme silme veya güncelleme yapmaz geçtiðin yerin view orada tanýmlarsan ayný iþlemi yapar. o yüzden
dtoda veya model de tanýmlanan database verilerini viewda geçerken hangisi nerede tam tanýmlýyorsan hepsini ayný yerde geç

39. Videoda Identity Kütüphanesi için gerekli 2 tane asp.net core identity ve framework ýdentity ekledik ardýndan entitylayer katmanýna 
concrete içine iki tane class tanýmladýk biri approle biride appuser gerekli propertüleri girdik. ardýndan DataAccesLayer katmanýna
concrete içindeki contexte IdentityDbContext geçtik ve package manager consoledan migration uyguladýk.

40. Videoda RegisterController ve RegisterDto eklendi iþlemi 41. Videoda yapacaðýz.

41. Videoda Registercontroller için CreateNewUserDto dan bir dto parametresi tanýmladýk ardýndan RegisterController içinde Indexde bunu geçtik ve
gerekli kodlarý yazmaya baþladýk ardýndan kendim parolalar için kullanýcýya hata mesajý yazdýrmak için Model içine CustomerIdentityValidator klasörüne
bir class ekledim ve gerekli kodlarý içine geçtim. ve bunu Index View tarafýnda modelonly olarak asp-validator-summary içinde geçtim.
ardýndan bunun çalýþmasý için program.cs tarafýnda gerekli kod olarak þu þekilde geçilmelidir.
builder.Services.AddIdentity<AppUser, AppRole>().AddEntityFrameworkStores<Context>().AddErrorDescriber<CustomerIdentityValidator>();
identity kütüphanesinin eklenmesi yanýnda direk AddErrorDescriber<model tanýmlanan class geçilmelidir.>

42. Videoda login iþlemi yapmak için LoginController tanýmladýk ve onun için bir Dto tanýmlamasý yapmamýz gerekiyor ve LoginUserDto tanýmlamýþ olduk 
ardýndan LoginController ekranýnda Httppost etrabütün içine loginuserdto geçtik ve gerekli kodlama iþlemlerini yaptýk. Ardýndan ýndex tarafýnda 
view içine geçtik tabiki unutmamýz gereken birþey dto kullanýlýyorsa mappingde kullanýlmasý gerekicek mapping de geçmiþ olduk.

43. Videoda Default Controller oluþturduk ve Asýl temayý eklemiþ olduk.

44. Videoda View Componentlere ayýrma iþleminin baþlangýcý.

45. Videoda Layout komple partiallara ayýrdýk.

46. Videoda Anasayfa düzenlemeleri yapýldý.

47. Videoda About Entity eklendi. DataAccesLayer Katmanýnda eklenen Entityi Concrete klasörünün içinde contextde sql sayfamýza
ekledik. Ardýndan Abstractta ve EntityFrameworkde eklenen entity geçildi. Geçilen Entity BusinessLayer katmanýnda hem Abstracta
hemde Concerete sayfasýnda ekleme silme ve güncelleme iþlemleri yapabilmesi için eklenmesi yapýldý ardýndan WebApi katmanýnda 
controller klasöründe Swagger için ekleme silme güncelleme testleri yapýldý. Frontend tarafýnda tanýmlanan components de yer
alan aboutusPartial gidip gerekli iþlemleri yaptýk ve bunun ViewComponents de çaðýrma iþlemi yapýldý onlardan önce ise Frontend 
tarafýnda dto tanýmlandý.

48. Videoda Frontend tarafýnda our rooms yaptýk onun için bir dto tanýmlandý sadece ve Componentd de tanýmlanan dto ile çaðýrýlma 
iþlemi yapýldý bir sonraki iþlemde componentsde Model þeklinde çaðýrýlýp foreach ile döndürülüp ekledikçe gelmesini saðladý.

49. Videoda Componentsde ve ViewComponents olan Video düzenlemesi hale getirdik.

50. Videoda Componentsde ve ViewComponents olan Service dinamik hale getirdik.

51. Videoda Componentsde ve ViewComponents olan Testimoniali dinamik hale getirdik.

52. Videoda Componentsde ve ViewComponents olan Teams dinamik hale getirdik.

53. Videoda Componentsde ve ViewComponents olan Subscribe dinamik hale getirdik. Subscribe için Default Controller da içine tanýmlama yaptýk ve
oradan bir view oluþturduk ardýndan onun için httpost ve httpget þeklinde atrebütler ile gerekli iþlemleri yaptýk.

54. Videoda Subscribe buton sorunu vardý onu halletik

55. Videoda Footer Alaný düzenlendi.

56. Videoda Booking sayfasý oluþuturuldu.

57. Videoda EntityLayer katmanýnda Booking class oluþturuldu ve bu oluþturulan sýnýf DataAcces katmanýnda çaðrýldý, ve database yansýtýldý. 
ardýndan abstract ve EntityFramework'e gerekli tanýmlamalar yapýldý. BusinessLayer katmanýnda abstract ve concrete klasörlerine tanýmlamalar yapýldý ve
program.cs de tanýmlamalar geçirildi.

58. Videoda Swagger için controller api tarafýnda tanýmlama yapýldý ve controller için dolduruldu. Ve Frontend tarafýnda Controller tarafýnda AddBooking
tanýmlandý ve bir view oluþturuldu. Viewler düzenlendi.

59. Videoda BookingController da ekleme ilþlemi yapýlacaktýr. AddBooking adýnda viewýmýz Tanýmladýðýmýz dto kýsmýndaki CreateBookingDto model olarak 
çaðýrýp gereklii kodlarý ve asp-for, controller tanýmlamalarý yaptýk.

60-61 Videoda Butonlar eklendi ve düzenlendi.

62. Videoda BookingAdmin controller ApprovedReservations isimler baþlýðýn içeriðindeki metodlarý yazdýk.

63. Videoda Entitye özel metod tanýmladýk. Abstract içinde IbookingDal da olan yere bir özgü metod tanýmladýk ve EfBookingDal da ise bunu çaðýrdýk ve içine
gerekli metodlarý yazdýk ardýndan BusinessLayer Katmanýnda BookingService IbookingDal da tanýmlanan metodu Service içinde çaðýrdýk baþýna T koyaraktan
farklýlýðýný saðlasýn diye bunuda BookingManager da iþleme geçirdik ve WepApi kýsmýnda BookingControllerda Ýþleme aldýk.

64. Videoda ise Attribütlere birden çok nasýl kullanýlýr öðrenildi. Web Api kýsmýnda BookingController içinde HTTPPUT dan 2 tane vardý onlara alýnanb
baþlýðý tanýmladýk.

65. Videoda Entitye özel metod tanýmladýk. Abstract içinde IbookingDal da olan yere bir özgü metod tanýmladýk ve EfBookingDal da ise bunu çaðýrdýk ve içine
gerekli metodlarý yazdýk ardýndan BusinessLayer Katmanýnda BookingService IbookingDal da tanýmlanan metodu Service içinde çaðýrdýk baþýna T koyaraktan
farklýlýðýný saðlasýn diye bunuda BookingManager da iþleme geçirdik ve WepApi kýsmýnda BookingControllerda Ýþleme aldýk.

Önemli!!
69. Videoda RapidApi diye bir klasör oluþturduk ve onada controller da bir controller oluþturduk 100 filmi rapid api ile çekmek için 
ardýndan rapid api web sitesinde c# httpclient þeklinde çekme iþlemi için koduna baktým. Ardýndan bunu controller üzerinde tanýmladým ve bir adet view
model oluþturdum. Neleri çekmem gerektiðini bilmek için sonra Controller bir view oluþturdum ve ondan ViewModel tanýmladýðýmý model ve list þeklinde
çaðýrdým ve gerekli iþlemleri web siteme yansýmasý için frontend kodlarýný yazdým.
Önemli!!
70. Videoda RapidApi diye bir klasör oluþturduk ve onada controller da bir controller oluþturduk. Bu sefer doviz kuru çekmek için Controller oluþturduk.
ardýndan Controller da c# httpclient þeklinde rapidapi web sitesinde kodunu controllera entegre ediyoruz ve bir view model oluþturuyoruz view modeli
oluþturduktan sonra edit den özel yapýþtýrma sistemi var ordan json olarak çevirdik. Ardýndan Index tarafýnda tanýmlanan model list þeklinde web sitesine
frotend kodlarýyla yansýttýk.
Önemli!!
72. Videoda RapidApi diye bir klasör oluþturduk ve onada controller da bir controller oluþturduk. Bu sefer otellere göre çekmek için Controller oluþturduk.
ardýndan Controller da c# httpclient þeklinde rapidapi web sitesinde kodunu controllera entegre ediyoruz ve bir view model oluþturuyoruz view modeli
oluþturduktan sonra edit den özel yapýþtýrma sistemi var ordan json olarak çevirdik. Ardýndan Index tarafýnda tanýmlanan model list þeklinde web sitesine
frotend kodlarýyla yansýttýk. 
Önemli!!
73. Videoda BookingLocation Controller tanýmlandý ve yine rapidapiden c# httpclient ile lokasyon verilerini çektik, ve bunu ýndexde tek bir lakasyonu 
alabilmek için gerekli düzenleme frontend kodlarý ile yapýldý fakat þöyle ki controllerde da bunu çaðýrdýk ki viewmodele tanýmlananý ve bide viewmodeli
ýndexde çaðýrdýk verileri Model View de ki proplarý ise rapidapi result þeklinde kopyaladýk ve model classýnda özel yapýþtýrma ile çaðýrdýk.
Önemli!!
74. Videoda BookingLocation controller da if methodu tanýmladýk ama class içine bir method tanýmladýk string türünde cityname ile ardýnda if else methodu
ile iþlem yapýlan kodlarý döngüye aldýk. cityName ise RequestUri içindeki get iþlemi yapýlan yerde ise dolar tanýmlayýp class verdiðimiz methodu orada 
tanýmladýk eðer ki else yanlýþ ise bize direk parisin kodunu döndürücektir.Index tarafýnýda kontrol et orada farklý bir tanýmlama þekli yapýldý.
Önemli!!
75. Videoda BookingByCity Controller da 74. Vidoda id ile getirilen otelleri BookingByCity sayfasýnda Bookinglocation idsini verdi ve bizde BookingByCity
ile bunun verilen idnin otellerini sýrayla yazdýrdýk ekranýmýza. Ýncele Önemli dersler Baþýna önemli koyduklarým.

76. Videoda JWT bir güvenlik amacý ile kullanýlan bir ara gibi düþünebiliriz

77. Videoda JWT paketi kuruldu JWT Barear paketi kuruldu.

78. Videoda JWT program.cs de konfigürasyon edilmesini öðrendik program.cs deki kodlara bakabilirsin.

79. Videoda JWT oluþturmak için bir model klasörü tanýmlayýp model klasörünün içine class yazýp içine kodlarýmýzý geçirdik.

80. Videoda DefaultController oluþturuldu ve postmande bu denendi. Deneme þekli þu þekilde http://localhost:15223/api/Default/Test bu þekilde denendi
swaggerda alýnan local adý: localhost:15223/ kendi apimiz: api / Controller ismi: Default / sýnýfýn ismi: Test

81. Autohorize kullanýmý öðrendik CrateToken olduðu yerde vardýr. [Authorize]

82. Videoda Program.cs Closeskew parametresini kullanmamýz gerekti. Yoksa saniye veya saat olaylarý iþe yaramayacaktýr.

83. Videoda CreateToken classýnda Admin için bir token oluþturduk. 

84. Videoda test için isim düzenlemeleri ve düzenleme yapýlacak.

87. Videoda EntityLayer katmanýna Guest eklendi.

88. Videoda Triggerler yazýldý. Triggerlar ve toplama iþlemleri dinamik hale geldi.
--Update Abouts set RoomCount =(select count (*) from Rooms), 
--StaffCount = (select count(*) from Staffs),
--CustomerCount = (select count(*) from Guests)

--Select * from Abouts

Triggerlar SQL yazýlanlar 
--Create Trigger Roomdecrease
--On Rooms
--After Delete 
--As
--Update Abouts set RoomCount = RoomCount-1 = Trigger bir azaltma 

--Create Trigger Roomincrease
--On Rooms
--After Insert 
--As
--Update Abouts set RoomCount = RoomCount+1 = Trigger bir arttýrma 

--Drop Trigger Roomdecrease = trigger silme iþlemi için

90. Videoda EntityLayer katmanýnda Contact sýnýfý oluþturuldu. DataAccessLayer katmanýnda Contact klasöründeki context de Contact database ekleme iþlemi
yapýldý. Abstract klasörü ve EntityFramework klasörlerine contact bilgileri geçildi ve tanýmlamalarý yapýldý. BusinessLayer katmanýnda ise Abstract ve 
Concrete klasörlerinin içine tanýmlamalar yapýldý. WepApi katmanýnda Controller geçildi ve Controllerda tanýmlama iþlemleri yapýldý ve Program.cs 
Contact geçilmesi yapýldý.Frontend tarafýnda Controllerda ContactController oluþturuldu ve bir ýndex view oluþturduk. ardýndan booking ýndexden örnek aldýk
ve _ContactCoverPartial adýnda bir partialview oluþturduk. 

91. Videoda ContactController içine bize mesaj yapýlabilmesi için gerekli httpget ve httppost metodlarýnýn altýna gerekli gönderme mesajý kodlarý yazýldý.
Ardýnda bir CreateContactDto oluþturduk Entitylayer tanýmlanana propörtüler yazýldý. SendMessage View oluþturuldu ve Contact için model olarak en üste bir
model tanýmlandý CreateContactDto olarak verdik ardýndan view kopyala yapýþtýr yaptýk ve sonrasýnda form method=post asp-action=SendMessage asp-controller=Contact
olarak form yazýldý ve türkçeleþtirme iþlemleri yaptýktan sonra name olarak CreateContactDto tanýmlanan propörtüleri name þeklinde yazdýk.

92. Videoda Google Haritalarda istediðimiz yeri seçip paylaþa týklayýp harita yerleþtirme seçeneðine seçiyoruz ve html kopyala diyip ifarame src içindeki
haritayý kopyalayýp bizim google haritamýza yerleþtiriyoruz iframe src týrnak içindeki google haritayý. kendi týrnak içimizdeki google haritayla 
deðiþtiriyoruz.

93-94 Videoda hata alýndý tekrar bakýlcak adminaboutcontroller güncelleme iþlemi

95. Videoda Odalar Güncelleme iþlemi silme ve ekleme iþlemleride yapýldý. 

96. Videoda Guest kýsmýnýn Dtolarý oluþturuldu, hem api controller ve web uý controller oluþturdu. DataAccessLayer katmanýnda 
Abstract ve Ef içine guest classlarý eklendi BusinessLayer katmanýnýn içinde bulunan Abstract ve Concrete klasörlerinin içine de guest classlarý eklendi. Api Controllerda bunlarýn Swagger da 
denemesi ve çalýþmasý için gerekli kodlama parametleri geçildi. WebUI Controller tarafýnda kodlama yapýldý. 

97. Videoda Index ve Ekleme iþlemi Viewleri oluþturup Web sitesine yansýtýldý. Dinamik hale getirildi. 

98. Videoda Paket olarak FluentValidation yüklendi ve bir klasör oluþturuldu adýna ardýndan sýnýf oluþturduk ve ctor ile sýnýf geçtik. Kodlara bakabilirsin

99. Videoda Guest Controller da if kullanýlarak Kurallar geçilmesi saðlandý, ve AddGuest Viewýna gerekli asp-validation-rules eklendi.

100. Videoda Program.cs Tanýmlama yapýldý açýklama satýrlarýný oku

101. Videoda Update için yani Guest güncellemek için gerekli kurallarý ekleme iþlemi yaptýk. Validator Klasörünün içne UpdateGuestValidator sýnýfý eklendi
ardýndan gerkeli tanýmlama yapýldý. Controllerda çaðrýldý ve view da kural geçildi.

102. Videoda ContactController oluþturuldu yani mail sayfasý oluþturuldu. Ardýndan View yani web sitesi tasarýmý oluþturuldu.

103. Videoda Ýlk baþta listeleme yapmak için dto oluþturduk ardýndan BusinessLayer ContactManager geldik oradaki listeleme iþlemine kod yazdýk.
ContactController Api kýsmýnda Swagger için çalýþmasý gerekli olduýðý için burayada gerekli httpget komutu yazýlmýþtýr.
AdminContactController WEbuý kýsmýnda gerekli kodlama iþlemleri yaptýk listeleme iþlemi için 

104. Videoda EntityLayerdan Bir SendMessage Class oluþturuldu içeriði yazýldý. DataAccesLayer gelindi Concrete SendMessage database yansýmasý için 
yazýldý. Abstract ve EntityFramework klasörlerine ISendMessageDal interface ve EfSendMessageDal class olarak geçildi. BusinessLayer katmanýnda ise 
Abstract ve Concrete ISendMessageService interface ve SendMessageManager class olarak geçildi ve içlerine kodlarýmýzý yazmýþ olduk. Program.cs de 
.net 6.0 ve üzerilerde geçilmesi gereken DataAccesLayer ve BusinesLayer tanýmlanan sýnýflar geçilmesi gerekiyor. ApiControllerda SendMessageController
oluþturuldu ve ekleme silme güncelleme iþlemleri gerçekleþtirildi. AdminContactController sayfasýnda Ekleme iþlemi kodlarý yapýldý. CreateSendMessageDto
katmanýndanda Database verilerine ulaþtýk.

105. Videoda AdminController tarafýnda SendMessage View oluþturuldu ve Gerekli web site düzenlemeleri yaptýk. AdminContanctcControllerda Mail gönderme
iþlemi yaptýk SendMessage da Ardýndan bir view oluþturduk bu view oluþturduktan sonra dto oluþturduk çünkü veritabaný verilerini siteye çekip girilen 
parametleri veritabanýna kaydetmek için.

107. Videoda Gönderilen mesajlar sayfasý oluþturuldu. SendBox View oluþturuldu gerekli iþlemler yapýldý. ContactControllerda vardýr.

110. Videoda Mesaj detaylarý sayfasý AdminContactController ekranýnda bakabilirsin sadece oluþturduk sayfasý. 

111. Videoda MessageDetails içine id gelecek þekilde ayný güncelleme iþlemindeki gibi seçip o id deki getirmek istediðim iþlemleri getirmek için kodlama 
yapýldý. ContactDto içinde SendMessage için yapýlan bir dto var GetMessageByIDDto burada database verilerini çekmek için parametreleri tanýmladýk.
MessageDetails kýsmýnada Dtodaki verileri çaðýrýp Sayfaya karþýlaþtýrdýk.

112. Videoda Gönnderilen mesajlarýn detay sayfasý oluþturuldu. ve onunda bir dto ile oluþturulmuþ oldu. view ekranýnda o dtodan yararlanýp detaylarýný 
sitede göstermiþ olduk.

113. Videoda AdminSideBar düzenleme yapýldý.

114. Videoda Paket yükleme iþlemi gerçekleþtirildi. mimeKit yüklendi. AdminMailController oluþturuldu ve mail gönderme iþlemi kodlarý yazýldý.
Index view oluþturuldu ve gerekli Frontend kodlarý yazýlarak bir sayfa tasarlandý.

117. Videoda bir image yükleme iþlemi yapmamýz gerekmektedir. bunu için apicontroller da bir controller oluþturuldu ve gerekli kodlama iþlemleri yazýldý.

119. Videoda WebUI controller da bir controlelr oluþturduk AdminFileImageController diye onun içine gerekli kodlarýmýzý yazýp açýklama satýrlarý var
detaylý bakabilirsin sonrasýnda bir ýndex oluþturup gerekli frontend kodlarý eklemiþ olduk.

120. Videoda Frontend tarafýnda eklenip eklenmediði kontrol edilmiþtir. 

121. Videoda Bir api kýsmýnda controller AdminFileController oluþturuldu ve gerekli kodlarý girildi tekrardan bakýlacaktýr. Ardýndan WebUI tarafýnada
bir controller oluþturuldu MVCController onun içinede kodlamalar girildi bakmalýsýn. Indexde AdminFileImage gibi bir web arayüzü oluþturuldu.

122. Videoda Kullanýcý giriþ yapmadan bazý web sayfalarýna giriþ yapamamasý için gerekli kodlama Program.cs tarafýndan yazýldý.

123. Videoda Eðer kullanýcý o web sayfasýna ulaþamýyor ise Logine yönlendirilmesi gerekiyor bununda kodu program.cs tarafýnda verilmiþtir. Hata ile 
karþýlaþabilirsin bununda olayý Gerekli gidecek yere AllowAnonymouse verilmesi gerekmektedir.

124. Videoda gerekli web sayfalarýna gerekli allowananoums kullanýlmýþtýr. 

125. Videoda Error404 sayfasý oluþturuldu sayfa bulunamadý hatasý ile karþýlaþtýðýnda kullanýcý düzenli ve güzel bir error sayfasý karþýlýyor olacaktýr.

126. Videoda Bize gönderilen mesajý sayýsý ekrana yansýtmak için IContactDal bir metod tanýmlandý. EfContactDal da metoda kod eklendi. BusinessLayerKatm.
IContactService Dataacceslayerda tanýmlanan klasördeki IcontactDal mirasýný alacaðýný için ona benzer baþýna sadece T koyarak farklý olduðunu belirtmek 
için gerekli metod tanýmlandý. IContactManager sýnýfýnda gerekli kod iþlemi geçildi ve ContactController api tarafýnda get isteði bulunarak ekrana 
yansýtýldý.

127. Videoda Bize gönderilen mesajý sayýsý ekrana yansýtmak için ISendMessageDal bir metod tanýmlandý. EfMessageDal da metoda kod eklendi. BusinessLayerKatm.
ISendMessageService Dataacceslayerda tanýmlanan klasördeki ISendMessageDal mirasýný alacaðýný için ona benzer baþýna sadece T koyarak farklý olduðunu 
belirtmek için gerekli metod tanýmlandý. ISendMessageManager sýnýfýnda gerekli kod iþlemi geçildi ve SendMessageController api tarafýnda get isteði 
bulunarak ekrana yansýtýldý. 

128. Videoda Web sitesinde mesajlar kýsmýna gerekli bir kaç kod parçacýðý eklendi bunu da AdminContactControllerda Inbox Sýnýfýnýn içinde ResponseMessage2
ile çalýþan kodu inceleyebilirsin.

129. Videoda Web sitesindeki mesajlar kýsmýnda gerekli kod parçasý AdminContactController Inbox içinde ResponseMessage 3 olana bakabilirsin.

130. Videoda CategoryMessage ile Contact arasýnda bir iliþki kurulmuþtur. 

131. Videoda DataAccesLayer ve Businesslayer katmanlarýndaki klasörlere yeni tanýmlanan sýnýf için gerekli metodlar geçildi. Program.cs bilgileri geçildi
Api tarafýnda Controller geçildi. Consume edildi.

132. Videoda listeleme yapabilmek için dto oluþturuldu. WebUI tarafýna ContactController içindeki indexe Anasayfada yani bu iþlem oradaki indexe 
listeleme iþlemi uygulandý ilk baþta ardýndan dropdown listelenen iþlemler taþýndý.

133. Videoda Hata alýndý bakýlcak 

134. Videoda Swagger yapmadan identity kullanarak kullanýcýlarý listeledik.

135. Videoda Kullanýcýlarý listeleme iþlemini webUI tarafýnda listelemiþ olduk.

136. Videoda WorkLocation entitylayer oluþturuldu appuser ile iliþkilendirildi ve WebUI tarafýnda RegisterControllerda verilen bazý parametreler geçildi
Asp.net Users sýnýfý için 

137. Videoda Worklocation Tablosunu web sitesine yansýttýk.

138. Videoda WorkLocation gerekli DataAccesLayer ve BusinessLayer katmanlarýnýn içindeki klasörlere geçtik ve Api tarafýndaki controller iþlemleri yaptýk

139. Vidoeda WebUI tarafýnda apiyi consume ediyoruz. api consumedan sonra listeleme iþlemi yaptýk. Index verileri çekip web sitesine çekmiþ olduk.

140. Vidoeda DataAccesLayer da abstract ve entityframework appuser için sýnýflar oluþturuldu. BusinessLayer katmanýnda abstract ve concrete klasörleri
ile ilgili bir sýnýfta tanýmladýk appuser için sonrasýnda api consume iþlemi uygulandý. 

148. Videoda UserList indexinde karar merceði kuruldu if if kullanýldý.	

!!!!Önemli
152. Videoda Userlarý bir lokasyona göre getirip listeleme iþlemi yapmaya çalýþtýk ilk baþta kendimiz listeledik normal þekilde sonrasýnda Api tarafýnda
bir seçmeli kod yazdýk. AppUserWorkLocation kýsmýna bir kod yazýldý ÝNCELE ardýndan View oluþturuldu api tarafýnda model klasörünün altýnda sonrasýnda 
gerekli view çaðrýldý ve select ile seçilip veriler tolist ile listelendi.

155. Videoda Dashboard için bir index sayfasý düzenlendik ve o index sayfasý web tasarýmýný hallettik.

156 Videoda Dashboard head ve dashboardun weidget partialýný ayýrdýk.

157. Dashboard ekranýnda çalýþanlarý toplayýp dashboard yansýtmak istiyoruz. Bunun için IstaffDal özgü bir method tanýmladýk ve EfstaffDal da bunu implament
ettik ardýndan da gerekli kodu Ef içine tanýmladýk.Bunu BusinessLayer da abstract ve Concrette geçtik ControllerApi de bunu tanýmladýk ve gerkeli kod 
parçacýðýný swagger da geçmiþ odluk.

158. Videoda Staff Count için ViewComponent içini doldurduk ve tanýmlanan jsondatayý viewbag ile taþýyýp web sitemize göstermiþ olduk.

161. Videoda DashboardWidget gelmesi gereken verilerin toplamýný yapýp ardýndan istenen veriyi web sitesine yansýttýk 157. Videoda yapýlanýn aynýlarý
diðer getirmek istediðim verileride yapmýþ olduk.

162. Videoda DashboardLast4StaffList component içine son 4 çalýþaný getirmek için gerekli kodlarý ilk baþta DataAccess katmanýndaki abstract ve entity de
staff için özel iþlemler geçildi Efde staff için son 4 seçeneði seçilmesi için kodlama yapýldý. BusinessLayer katmanýnda da Abstract ve Concrete klasörleri
içine geçildi sonrasýnda StaffController api tarafýnda gerekli swaggera çaðrýlmasý için kod yazýldý ve son olarak Componentte listeleme iþlemi yaptýðýmýz 
için gerekli kodlama geçildi.

163. Videoda 162. Videodanun aynýsý yapmýþ bulunmaktayýz 

164. Videoda DashobardLast6bookings View kýsmýný düzenledik Componentsdeki _DashboardLast6Booking olarak düzenledik ve if ile þartlarý belirledik.

165. Videoda Dashboard componentte abone verilerimizi çekme iþlemi yapacaðýz